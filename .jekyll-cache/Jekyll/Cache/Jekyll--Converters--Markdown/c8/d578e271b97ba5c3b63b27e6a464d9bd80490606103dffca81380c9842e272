I"1<h2 class="display1 m-3 p-3 text-center">L.A.M.A. AI using Reinforcement Learning</h2>

<div>
    <img src="/assets/images/soc/item-22.png" width="300" height="300" alt="" class="border rounded img-soc" />
</div>
<div>
    <br />
    <ul>
        
        <li><h4 class="text-primary text-center">Development</h4></li>
        
        <li><h4 class="text-primary text-center">Machine Learning</h4></li>
        
    </ul>
    <br />
    <h4 class="display3  ">Mentors :</h4> 
    <ul>
        
        <li><h5 class=" ">Kumar Ayush</h5></li>
        
        <li><h5 class=" ">Anuj Shetty</h5></li>
        
    </ul>
    <h4 class="display3  ">Mentees :</h4> 
    <ul>
        
        <li><h5 class="">Akash Cherukuri</h5></li>
        
        <li><h5 class="">Anirudh Mittal</h5></li>
        
        <li><h5 class="">Jayesh Singla</h5></li>
        
        <li><h5 class="">S. Anand Natarajan</h5></li>
        
    </ul>
    <h4 class="display3  ">Stipend :</h4> 
    <ul>
        
        <li><h5 class="">INR 5000</h5></li>
        
    </ul>
</div>
<div>
    <p class="display3" style="font-size:20px;">
        <br />
        Implementation of an RL based AI for playing L.A.M.A.
        <br /><br />
        <b>L.A.M.A.</b>
        <br />
        <a href="https://boardgamegeek.com/boardgame/266083/llm">L.A.M.A.</a> is a board game. It fits all the criteria I would look for. It is small to carry, easy to understand, quick to play and most importantly, a good mix of strategy and randomness. You can play it sober and not sober and have fun.
        <br /><br />
        <b>Pre-requisites</b>
        <br />
        Basic proficiency in Python
        
    </p>
</div>
<div>
    <h4 class="display3" style="margin:40px 0px 40px 0px;">Tentative Timeline :</h4>
    We expect about 100 hours of work spread over ten weeks.
    <table class="table table-striped">
    <thead>
        <tr>
        <th>Week</th>
        <th>Work</th>
        </tr>
    </thead>
    <tbody>
        <tr>
        <td style="width: 120px">Week 1</td>
      <td>Learn python and python-on-android, play with Rubik’s cubes to get a clear grasp about the problem. Try pycuber, a python package for dealing with Rubik’s cubes, which helps in creating graphical user interface.</td>
    </tr>
    <tr>
      <td>Week 2</td>
      <td>Go through the available literature on the problem. Understand basic algorithms and concepts of Reinforcement learning pertaining to the problem.</td>
    </tr>
    <tr>
      <td>Week 3</td>
      <td>Try out various Q-learning, Deep Q-learning examples and MCTS.</td>
    </tr>
    <tr>
      <td>Week 4</td>
      <td>Implement Deep Q-learning and MCTS for our problem.</td>
    </tr>
    <tr>
      <td>Week 5</td>
      <td>Measure performance against benchmark and hyper-parameter tuning.</td>
    </tr>
    <tr>
      <td>Week 6</td>
      <td>Buffer week to finish up with documentation</td>
    </tr>
    <tr>
      <td>Week 7</td>
      <td>Given an image taken from a good viewpoint, extract the details.</td>
    </tr>
    <tr>
      <td>Week 8</td>
      <td>Create a graphical user interface to upload the images of the cubes and return with an animation of the solution.</td>
    </tr>
    <tr>
      <td>Week 9</td>
      <td>Buffer week to finish up with presentation and documentation</td>
    </tr>
    </tbody>
    </table>
</div>

:ET